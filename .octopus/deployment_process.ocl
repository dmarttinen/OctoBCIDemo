step "run-api-script" {
    name = "Run api script"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $ErrorActionPreference = "Stop";
                
                # Define working variables
                $octopusURL = "https://clearmeasure.octopus.app/"
                $octopusAPIKey = $RunbookAPIKey
                $header = @{ "X-Octopus-ApiKey" = $octopusAPIKey }
                $spaceName = $OctopusParameters["Octopus.Space.Name"]
                $packageId = "Trident.Web"
                
                # Get space
                $space = (Invoke-RestMethod -Method Get -Uri "$octopusURL/api/spaces/all" -Headers $header) | Where-Object { $_.Name -eq $spaceName }
                
                # Get projects for space
                $projectList = Invoke-RestMethod -Method Get -Uri "$octopusURL/api/$($space.Id)/projects/all" -Headers $header
                
                
                # Loop through projects
                foreach ($project in $projectList) {
                    $deploymentProcessLink = $project.Links.DeploymentProcess
                    
                    # Check if project is Config-as-Code
                    if ($project.IsVersionControlled) {
                        # Get default Git branch for Config-as-Code project
                        $defaultBranch = $project.PersistenceSettings.DefaultBranch
                        $deploymentProcessLink = $deploymentProcessLink -Replace "{gitRef}", $defaultBranch
                    }
                
                    $deploymentProcess = Invoke-RestMethod -Method Get -Uri "$octopusURL$deploymentProcessLink" -Headers $header
                    Write-Host $deploymentProcess
                
                    # Get steps and check step for specified package
                    foreach ($step in $deploymentProcess.Steps) {
                        $packages = $step.Actions.Packages
                        if ($null -ne $packages) {
                            $packageIds = $packages | Where-Object { $_.PackageId -eq $packageId }
                            if ($packageIds.Count -gt 0) {
                                Write-Host "Step: $($step.Name) of project: $($project.Name) is using package '$packageId'."
                            }
                        }
                    }
                }
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"
    }
}

step "run-octopus-deploy-runbook" {
    condition = "Variable"
    name = "Run Octopus Deploy Runbook"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
        Octopus.Step.ConditionVariableExpression = "#{if database-exists != \"True\"}true#{/if}"
    }

    action {
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Template.Id = "ActionTemplates-263"
            Octopus.Action.Template.Version = "14"
            Run.Runbook.Api.Key = "#{RunbookAPIKey}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Create Trident DB"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool_variable = ""
    }
}

step "hello-world" {
    name = "Hello World"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = "Say-Hello"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "hello-world-3" {
    name = "Hello World 3"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = "Say-Hello"
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "deploy-trident-web" {
    name = "Deploy Trident Web"
    properties = {
        Octopus.Action.MaxParallelism = "1"
        Octopus.Action.TargetRoles = "trident-web"
    }

    action "run-update-load-balancer" {
        name = "Run Update Load Balancer"
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-263"
            Octopus.Action.Template.Version = "14"
            Run.Runbook.Api.Key = "#{RunbookAPIKey}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Update Load Balancer"
            Run.Runbook.Project.Name = "#{Octopus.Project.Name}"
            Run.Runbook.PromptedVariables = <<-EOT
                Project.Loadbalancer.Percent::#{Project.Loadbalancer.Percent}
                Project.Loadbalancer.WaitInMinutes::#{Project.Loadbalancer.WaitInMinutes}
                Project.Loadbalancer.HostToUpdate::#{Project.Tenant.Loadbalancer.HostName}
                
                EOT
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "hosted-windows"
    }

    action "add-to-load-balancer" {
        action_type = "Octopus.Script"
        name = "Add to Load Balancer"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $machineName = $OctopusParameters["Octopus.Machine.Name"]
                
                Write-Host "Add $machineName to the Load Balancer."
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}

step "deploy-trident-web-1" {
    name = "Deploy Trident Web 1"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action "deploy-trident-web" {
        action_type = "Octopus.TentaclePackage"
        name = "Deploy Trident Web"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.JsonConfigurationVariables"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "appsettings.json"
            Octopus.Action.Package.PackageId = "Trident.Web"
            Octopus.Action.RunOnServer = "false"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Web"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "trident-notifications" {
    name = "Trident Notifications"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        properties = {
            Body = "#{Notification.Body.Text}"
            HookUrl = "#{Notification.Teams.Webhook}"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Template.Id = "ActionTemplates-221"
            Octopus.Action.Template.Version = "22"
            TeamsPostMessage.RetryCount = "1"
            TeamsPostMessage.RetryDelay = "100"
            TeamsPostMessage.RetryPosting = "False"
            Timeout = "60"
            Title = "#{Notification.Subject.Text}"
        }
        worker_pool_variable = ""
    }
}

step "trident-email-notifications" {
    name = "Trident Email Notifications"

    action {
        action_type = "Octopus.Email"
        is_disabled = true
        properties = {
            Octopus.Action.Email.Body = "#{Email Body}"
            Octopus.Action.Email.Subject = "#{Email Subject}"
            Octopus.Action.Email.ToTeamIds = "bci-training"
            Octopus.Action.RunOnServer = "false"
        }
    }
}